server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    # http {
    #   sendfile on;
    #   tcp_nopush on;
    #   tcp_nodelay on;
    # }

    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # ========== MY CONFIGURATIONS ==========

    location /videos/ {
        
        types {
            application/vnd.apple.mpegurl m3u8;
            video/mp2t ts;
            audio/aac aac;
        }

        add_header Content-Type application/vnd.apple.mpegurl;
        add_header Content-Disposition "inline";

        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Credentials true;

        root /var/www/html;
        # add_header Cache-Control no-cache;

        # Turn on byte-range support for efficient segment fetching
        # proxy_force_ranges on;

        # Disable buffering for faster response
        # proxy_buffering off;
        # proxy_request_buffering off;

        # Enable gzip for m3u8 files (optional)
        # gzip on;
        # gzip_types application/vnd.apple.mpegurl;
        # gzip_min_length 1000;
        # gzip_vary on;

        # Enable sendfile for faster static file delivery
        # sendfile on;
        # tcp_nopush on;
        # tcp_nodelay on;

        # default_type application/octet-stream;
    }

    # location /vod/ {
    #     root /var/www/html/videos;
    #     mp4;
    #     mp4_buffer_size 5M;
    #     mp4_max_buffer_size 10M;
    # }

    # location ~* \.(mp4|m3u8|ts)$ {
    #     expires 30d;
    #     add_header Cache-Control "public, no-transform";
    # }

    # location /videos/ {
    #     types {
    #         application/vnd.apple.mpegurl m3u8;   # HLS playlist
    #         video/mp2t ts;                        # HLS segments
    #         video/mp4 mp4;                        # MP4 video
    #         video/webm webm;                      # WebM video
    #     }
    #     add_header Content-Disposition "inline";

    #      # Enable caching
    #     add_header Cache-Control "public, max-age=30";
    #     expires 30s;

    #     root /usr/share/nginx/html;

    #     # Additional caching options for performance
    #     open_file_cache max=1000 inactive=30s;
    #     open_file_cache_valid 60s;
    #     open_file_cache_min_uses 2;
    #     open_file_cache_errors on;

    #     # CORS config
    #     add_header 'Access-Control-Allow-Origin' '*';
    #     add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
    #     add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept';

    #     if ($request_method = 'OPTIONS') {
    #         add_header 'Access-Control-Allow-Origin' '*';
    #         add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
    #         add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept';
    #         return 204;  # No content
    #     }

    #     # Buffering configurations
    #     proxy_buffering on;  # (off - Recommended for streaming)
    #     proxy_buffers 8 16k;
    #     proxy_buffer_size 32k;

    #     # Limit the response rate (this affects how quickly data is sent)
    #     limit_rate 100k;  # Adjust this value based on your needs

    #     # Timeout settings
    #     proxy_read_timeout 300;  # Increase read timeout
    #     proxy_send_timeout 300;  # Increase send timeout
    # }

    # Video-specific configurations
    # location ~* \.(mp4|mov|avi|mkv|webm)$ {
    #     # Enable range requests for video files
    #     add_header Accept-Ranges bytes;

    #     # Enable cache control
    #     expires 30d;  # Cache for 30 days
    #     add_header Cache-Control "public, no-transform";

    #     proxy_buffering off;  # Disable proxy buffering for video streaming
        
    #     # Limit the response rate (this affects how quickly data is sent)
    #     limit_rate 10k;  # Adjust this value based on your needs

    #     # Configure open file cache for better performance
    #     open_file_cache max=1000 inactive=60s;
    #     open_file_cache_valid 30s;  # Validate cached files every 30 seconds
    #     open_file_cache_min_uses 2;  # Minimum uses before caching
    #     # open_file_cache_lock on;  # Lock for cache updates

    #     # Optimize client body size
    #     client_max_body_size 100M;  # Allow larger file uploads if needed

    #     # Timeout settings
    #     proxy_read_timeout 300;  # Increase read timeout
    #     proxy_send_timeout 300;  # Increase send timeout

    #     root /usr/share/nginx/html/videos;
    # }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}
